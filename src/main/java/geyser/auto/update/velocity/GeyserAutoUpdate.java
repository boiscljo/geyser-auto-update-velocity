/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package geyser.auto.update.velocity;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.google.inject.Inject;
import com.velocitypowered.api.event.Subscribe;
import com.velocitypowered.api.event.proxy.ProxyInitializeEvent;
import com.velocitypowered.api.event.proxy.ProxyReloadEvent;
import com.velocitypowered.api.plugin.Dependency;
import com.velocitypowered.api.plugin.Plugin;
import com.velocitypowered.api.plugin.annotation.DataDirectory;
import com.velocitypowered.api.proxy.ProxyServer;

import lombok.AllArgsConstructor;
import lombok.Data;

import org.slf4j.Logger;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.StringWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.nio.charset.Charset;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

@Plugin(id = "geyserautoupdate", name = "GeyserAutoUpdate", version = "0.1.0-SNAPSHOT", url = "https://example.org", description = "I did it!", authors = {
        "Me" }, dependencies = { @Dependency(id = "geyser", optional = false),
                @Dependency(id = "floodgate", optional = false) })
public class GeyserAutoUpdate implements Runnable {

    private final ProxyServer server;
    private final Logger logger;
    Thread thread;
    ArrayList<updaterFile> updater = new ArrayList<>(List.of(
            new updaterFile("https://ci.opencollab.dev/job/GeyserMC/job/Geyser/job/master/rssAll",
                    "https://ci.opencollab.dev//job/GeyserMC/job/Geyser/job/master/lastSuccessfulBuild/artifact/bootstrap/velocity/target/Geyser-Velocity.jar",
                    "--", "plugins/Geyser-Velocity.jar"),
            new updaterFile("https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/rssAll",
                    "https://ci.opencollab.dev/job/GeyserMC/job/Floodgate/job/master/lastSuccessfulBuild/artifact/velocity/build/libs/floodgate-velocity.jar",
                    "--", "plugins/floodgate-velocity.jar")));

    @Data
    @AllArgsConstructor
    private static class updaterFile {
        public String rss_link;
        public String download_link;
        public String last_update;
        public String jar_file;
    }

    private Path dataDirectory;
    private Gson gson = new GsonBuilder().setPrettyPrinting().create();

    @Inject
    public GeyserAutoUpdate(ProxyServer server, Logger logger, @DataDirectory Path dataDirectory) {
        this.server = server;
        this.logger = logger;
        this.dataDirectory = dataDirectory;
    }

    public void saveConfig() {
        logger.info("Saving " + dataDirectory);

        Path links = dataDirectory.resolve("config.json");
        writeFileSync(links, gson.toJson(updater));
    }

    public void loadConfig() {
        logger.info("Loading " + dataDirectory);
        if (!dataDirectory.toFile().exists())
            dataDirectory.toFile().mkdir();
        Path links = dataDirectory.resolve("config.json");
        if (!links.toFile().exists()) {
            saveConfig();
            return;
        }
        String content = readFileSync(links);
        updater = (gson.fromJson(content, new TypeToken<List<updaterFile>>() {
        }.getType()));
    }

    private void writeFileSync(Path links, String content) {
        try {
            Files.writeString(links, content, Charset.defaultCharset());
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }

    private String readFileSync(Path links) {
        try {
            return Files.readString(links);
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return "";

    }

    @Subscribe
    public void onProxyInitialization(ProxyInitializeEvent e) {
        logger.info("Hey, geyser and floodgate will now update every 12 hours.");
        loadConfig();
        thread = new Thread(this);
        thread.start();
    }

    public static String DownloadWebPage(String webpage) {
        try {

            // Create URL object
            URL url = new URL(webpage);
            BufferedReader readr = new BufferedReader(new java.io.InputStreamReader(url.openStream()));

            // Enter filename in which you want to download
            StringWriter writer = new StringWriter();

            // read each line from stream till end
            String line;
            while ((line = readr.readLine()) != null) {
                writer.write(line);
            }

            readr.close();
            return writer.toString();
        }

        // Exceptions
        catch (MalformedURLException mue) {
            System.out.println("Malformed URL Exception raised");
        } catch (IOException ie) {
            System.out.println("IOException raised");
        }
        return null;
    }

    public void run() {

        try {
            while (true) {
                AtomicBoolean updated = new AtomicBoolean(false);
                Thread.sleep(1000/* 1 second */ * 60/* minute */ * 1 , 0);

                updater.forEach(entry -> {
                    String s = DownloadWebPage(entry.getRss_link());
                    s = s.substring(s.indexOf("<entry><title>") + 14);
                    s = s.substring(0, s.indexOf("</title>"));

                    if (!s.equals(entry.getLast_update())) {
                        logger.info(entry.getJar_file() + " needs updating, current version:" + entry.getLast_update()
                                + ", new version" + s);

                        updated.set(true);
                        entry.setLast_update(s);
                        try {
                            URL fetchWebsite = new URL(entry.getDownload_link());
                            ReadableByteChannel readableByteChannel = Channels.newChannel(fetchWebsite.openStream());

                            try (FileOutputStream fos = new FileOutputStream(entry.getJar_file())) {
                                fos.getChannel().transferFrom(readableByteChannel, 0, Long.MAX_VALUE);
                            }
                        } catch (IOException ex) {
                            logger.error("Could not update geyser", ex);
                        }
                    }
                });
                if (updated.get()) {
                    logger.info("Geyser has been updated, saving new Cache");

                    saveConfig();
                    logger.info("Geyser has been updated, waiting for 0 people online");

                    while (server.getPlayerCount() > 0) {
                        Thread.sleep(1000/* 1 second */ * 60/* minute */ * 10, 0);
                    }
                    logger.info("Geyser has been updated, restarting");
                    server.shutdown();
                    break;
                }
            }

        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
    }
}